#include <iostream>
using namespace std;


class Point{
public:
int x;
int y;

//..no arg constructor
Point(){x = y = 0;}

//..parametrized constructor
Point(int x, int y): x(x), y(y){}

//..overloading the operator+
Point operator+(Point &rhs)
{
  // Point C;
  // C.x = x + rhs.x;
  // C.y = y + rhs.y;
  // return C;

  return(Point(x + rhs.x, y + rhs.y));
}

Point operator-(Point &rhs)
{
  // Point C;
  // C.x = x - rhs.x;
  // C.y = y - rhs.y;
  // return C;

  return(Point(x - rhs.x, y - rhs.y));
}

Point operator++()
{
  x++;
  y++;

  return *this;
}

Point operator++(int)
{
  return ++(*this);
}

Point operator--()
{
  x--;
  y--;

  return *this;
}

Point operator--(int)
{
  return --(*this);
}

Point operator*(int n)
{
  return(Point(x*n, y*n));
}

friend Point operator*(int n, const Point &p);

Point operator/(int n)
{
  return(Point(x/n, y/n));
}

void operator+=(int n)
{
  x = x + n;
  y = y + n;
}

void operator-=(int n)
{
  x = x - n;
  y = y - n;
}

friend ostream &operator<<(ostream &out, const Point &rhs)
{
  out << "(" << rhs.x << "," << rhs.y << ")";
  return out;
}

friend istream &operator>>(istream &in, Point &p)
{
  cout << "Enter x: ";
  in >> p.x;
  cout << "Enter y: ";
  in >> p.y;
  
  return in;
}

};

Point operator*(int n, const Point& p){
  return Point(n * p.x, n * p.y);
}

void print(Point p);

int main() {
  Point A(1,2);
  Point B(1,3);
  
  print(A);
  print(B);
  Point C = A + B;
  print(C);

  ++A;
  A++;

  cout << A << endl;

  A += 3;

  cout << A << endl;

  A = A*2;
  cout << A << endl;
}

void print(Point p)
{
  cout << "(" << p.x << "," << p.y << ")" << endl;
}
